<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


	<!-- DB연결 -->
	<bean id="dataSource"
		  class="org.apache.commons.dbcp.BasicDataSource">
		  <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		  <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"/>
		  <property name="username" value="COMMUNITY" />
		  <property name="password" value="COMMUNITY" />
	</bean>

	<!-- mybatis 설정 -->
	<!-- mtbatis가 DB에 접속할 수 있도록 도와주는 설정  -->
	<bean id="sqlSessionFactory"
		  class="org.mybatis.spring.SqlSessionFactoryBean">
		  
		  <property name="dataSource" ref="dataSource"></property>
		  <property name="configLocation" value="classpath:/mybatis/mybatis.xml"/>
				  
	</bean>
	
	<!-- mybatis가 dBdp query(SQL)를 실행하고 , 결과를 받아오게 도와주는 설정  -->
	
	<bean id="sqlSessionTemplate"
		  class="org.mybatis.spring.SqlSessionTemplate">
		  <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
		  
	<!-- Tracsaction( Commit:, Rollback: 원복) 설정  -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		  <property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!--  rollback 규칙 설정 -->
	<tx:advice id="rollbackRule" transaction-manager="transactionManager">
		<tx:attributes>
				<!-- create로 시작하는 모든 메소드들 -->
			<tx:method name="create*" rollback-for="RuntimeException"/>
			<tx:method name="read*" rollback-for="RuntimeException"/>
			<tx:method name="update*" rollback-for="RuntimeException"/>
			<tx:method name="delete*" rollback-for="RuntimeException"/>
			<tx:method name="increment*" rollback-for="RuntimeException"/>
		</tx:attributes>		
	</tx:advice>	
	
		<!-- 	Transaction 대상 설정-->
		<!-- 관점지향 프로그래밍 aspect oriented programming -->
	<aop:config>
			<!-- com.ktds의 모든 패키지중에서 service의 모든 serviceimple의 모든 메소드들   -->
		<aop:pointcut id="pointCut"
					  expression="execution(public * com.ktds..service.*ServiceImpl.*(..))"/>
		<aop:advisor advice-ref="rollbackRule" pointcut-ref="pointCut"/>
		
		  
	
	</aop:config>

</beans>
