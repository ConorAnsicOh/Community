<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- 		인터페이스의 이름작성 -->
  <mapper namespace="CommunityDao">
  
  	<resultMap type="CommunityVO" id="CommunityVOMap">
  		<id column="ID" property="id"/>
  		<result column="TITLE" property="title"/>
  		<result column="BODY" property="body"/>
  		<result column="USER_ID" property="userId"/>
  		<result column="WRITE_DATE" property="writeDate"/>
  		<result column="VIEW_COUNT" property="viewCount"/>
  		<result column="RECOMMEND_COUNT" property="recommendCount"/>
  		<result column="REQUEST_IP" property="requestIp"/>
  		<result column="DISPLAY_FILE_NAME" property="displayFilename"/>
  	
  		<!-- 결과를 다른 값에 할당함. -->
  		<association property="memberVO" javaType="MemberVO">
  			<id column="M_ID" property="id"/>
  			<result column="EMAIL" property="email"/>
  			<result column="NICKNAME" property="nickname"/>
  			<result column="REGIST_DATE" property="registDate"/>
  		</association>
  	</resultMap>
  
  	<select id="selectAll"	resultMap="CommunityVOMap"> <!-- 인터페이스의 메소드의 이름을 적는다 -->
  		SELECT	        C.ID
  				, C.TITLE
  				, C.BODY
  				, C.USER_ID 
  				, TO_CHAR(C.WRITE_DATE, 'YYYY-MM-DD HH24:MI:SS') WRITE_DATE
  				, C.VIEW_COUNT
  				, C.RECOMMEND_COUNT
  				, C.REQUEST_IP
  				, C.DISPLAY_FILE_NAME
                , M.ID M_ID
                , M.EMAIL
                , M.NICKNAME
                , M.REGIST_DATE
  		FROM 	COMMUNITY C
  				, MEMBER M
  		WHERE	C.USER_ID = M.ID(+)
  		ORDER 	BY C.ID DESC
  	</select>
		<!-- VO의 카멜케이스와 언더바를 꼭 맞춰줘야한다. -->
		<!-- 언더바 된 변수명은 닉네임을 줄 수 있다 -->
		<!-- (+)의 의미는 outerJoin 시키는 방법. 오라클에서만 사용 가능한 방법. M.ID의 부족분 정보를 가져오고싶으면 (+) left outer Join (데이터가 없는곳에 +를 붙인다.) -->  	
 		<!-- 댓글의 갯수를 가져올 때 많이쓴다. -->
  	<!-- CRUD의 Create -->
  	<insert id="insertCommunity" parameterType="CommunityVO">
  		INSERT	INTO	COMMUNITY	(
  			ID
  			, TITLE
  			, BODY
  			, USER_ID
  			, WRITE_DATE
 			, VIEW_COUNT
  			, RECOMMEND_COUNT
  			, REQUEST_IP
  			, DISPLAY_FILE_NAME
  		)
  		VALUES	(
  			COMMUNITY_ID_SEQ.NEXTVAL
  			, #{title}
  			, #{body}
  			, #{userId}
  			, SYSDATE
  			, 0
  			, 0
  			, #{requestIp}
  			, #{displayFilename}
  		)
  		
  	</insert>
  		<!-- VALUES의 규칙은 VO의 멤버 변수를 #{}넣어 적어준다. -->
  	
  	<update id="increamentViewCount" parameterType="_int">
  		UPDATE	COMMUNITY
  		SET		VIEW_COUNT = VIEW_COUNT + 1 <!-- set에선 =이 할당한다. -->
  		WHERE	ID = #{id} <!-- WHERE에서는 =이 조건일때. -->
  	</update>
  	
  	<select id="selectOne" resultMap = "CommunityVOMap">
  		SELECT	        C.ID
  				, C.TITLE
  				, C.BODY
  				, C.USER_ID 
  				, TO_CHAR(C.WRITE_DATE, 'YYYY-MM-DD HH24:MI:SS') WRITE_DATE
  				, C.VIEW_COUNT
  				, C.RECOMMEND_COUNT
  				, C.REQUEST_IP
  				, C.DISPLAY_FILE_NAME
                , M.ID M_ID
                , M.EMAIL
                , M.NICKNAME
                , M.REGIST_DATE
  		FROM 	COMMUNITY C
  				, MEMBER M
  		WHERE	C.USER_ID = M.ID(+)
  		AND		C.ID = #{id}
  	</select>
  	
  	<update id="increamentRecommendCount" parameterType="_int">
  		UPDATE	COMMUNITY
  		SET		RECOMMEND_COUNT = RECOMMEND_COUNT + 1 
  		WHERE	ID = #{id} 
  	</update>
  		<!-- set에선 =이 할당한다. -->
  		<!-- WHERE에서는 =이 조건일때. -->
  	
  	<delete id="deleteCommunity" parameterType="_int">
 		DELETE
 		FROM	COMMUNITY C
 		WHERE	C.ID = #{id}
 	</delete>
 	
  	<delete id="deleteMyCommunities" parameterType="_int">
 		DELETE
 		FROM	COMMUNITY C
 		WHERE	USER_ID = #{userId}
 	</delete>
 	
 	<update id="updateCommunity"	parameterType="CommunityVO">
 		UPDATE	COMMUNITY
 		SET		WRITE_DATE		=	SYSDATE
 				<if test="requestIp != null and requestIp != ''">
 				, REQUEST_IP	=	#{requestIp}
 				</if>
 				<if test="title != null and title != ''">
 				, TITLE			=	#{title}
 				</if>
 				<if test="body != null and body != ''">
 				, BODY			=	#{body}
 				</if>
 				, DISPLAY_FILE_NAME = #{displayFilename}
 		WHERE	ID = #{id}
 		AND		USER_ID = #{userId}
 	</update>
 	
 	<!-- ID만 ROW갯수를 세어서 가져온다. -->
 	<select	id="selectMyCommunitiesCount"	resultType="_int" parameterType="_int">
 		SELECT	COUNT(ID)
 		FROM	COMMUNITY
 		WHERE	USER_ID = #{userId}
 	</select>
 	
 	<select id="selectMyCommunities"	resultMap="CommunityVOMap"	parameterType="_int">
 		SELECT	C.ID
  				, C.TITLE
  				, C.BODY
  				, C.USER_ID 
  				, TO_CHAR(C.WRITE_DATE, 'YYYY-MM-DD HH24:MI:SS') WRITE_DATE
  				, C.VIEW_COUNT
  				, C.RECOMMEND_COUNT
  				, C.REQUEST_IP
  				, C.DISPLAY_FILE_NAME
                , M.ID M_ID
                , M.EMAIL
                , M.NICKNAME
                , M.REGIST_DATE
  		FROM 	COMMUNITY C
  				, MEMBER M
  		WHERE	C.USER_ID = M.ID
  		AND		C.USER_ID = #{userId}
 	</select>
 	
 	<delete id="deleteCommunities" parameterType="map">
 		DELETE
 		FROM	COMMUNITY
 		WHERE	USER_ID = #{userId}
 		AND		ID IN
 		<foreach collection="ids" item="id" open="(" close=")" separator=",">
 			#{id}
 		</foreach>
 	</delete>
 	<!-- IN (1,2,3,4,5,)은 1 또는 2또는 3또는 4또는 5를 지워라. -->
 	
  </mapper>